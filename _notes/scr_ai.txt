german
american
team //returns 'german' or 'american'
canshootenemyfrom( Vector shootOrigin ) //Determines if it would be possible to shoot the sentient's enemy from the given position.
crawlto( String dest ) //Specify the location to crawl to.
crouchto( String dest ) //Specify the location to crouch to.
threatbias( Integer bias ) //Sets the threat bias for this player / AI
threatbias //Gets the threat bias for this player / AI
noanimlerp //Do not LERP to the next animation


distancetoenemy //Get the distance from the Actor to its enemy
favoriteenemy( Entity ai_or_player ) //Gets this AI's favorite enemy
findenemy //Finds the best enemy to target
enableEnemy //sets enableEnemy variable
enemy //Get the actor's current enemy
enemy_visible_change_time //Get the last time whether or not the enemy is visible changed, in seconds
enemysharerange( Float range ) //sets the range outside which the AI will not receive notification that a teammate has a new enemy
enemysharerange //gets the range outside which the AI will not receive notification that a teammate has a new enemy
enemysharerange( Float range ) //sets the range outside which the AI will not receive notification that a teammate has a new enemy
enemyswitchdisable //Disable enemy switching...
enemyswitchenable //Enable enemy switching...
distancetoenemy //Get the distance from the Actor to its enemy
is_enemy_visible //0 if the enemy is not currently visible, 1 if he is
last_enemy_visible_time //Get the last time the enemy was visible, in seconds
setaimtarget( Entity entity, Integer bMakeEnemy ) //Sets the primary weapon's aim target. if you pass a 1 for p2, the target will become the current enemy...
avoidplayer( Integer allowavoid ) //set to 0 if this AI shouldn't automatically get out of the way, non-zero if he should.
favoriteenemy( Entity ai_or_player ) //sets this AI's favorite enemy
favoriteenemy //Gets this AI's favorite enemy
findenemy //Finds the best enemy to target
gun //gets the gun to being used
gun( String s ) //specifies the gun to use


leash( Float distance ) //Sets the maximum distance the AI will wander from its leash home
leash //Gets the maximum distance the AI will wander from its leash home
tether( Entity entity ) //the entity to which the AI's leash should be tethered
maxdist( Float distance ) //Sets the maximum distance the AI tries to allow between itself and the player
maxdist //Gets the maximum distance the AI tries to keep between itself and the player
mindist //Gets the minimum distance the AI tries to keep between itself and the player
mindist( Float distance )

mood //gets the AI mood: 'bored', 'nervous', 'curious', or 'alert'.
mood( String new_mood ) //sets the AI mood... must be 'bored', 'nervous', 'curious', or 'alert'.

attackplayer //Force Actor to attack the player
cansee $ent
canshoot( Vector shootOrigin )
Determines if it would be possible to shoot the sentient's enemy from the given position.
forceactivate //forces an entity to activate outside of the player's PVS
physics_off //turn player physics off.
physics_on //turn player physics on.
immune( String immune_string1, [ String immune_string2 ], [ String immune_string3 ], [ String immune_string4 ], [ String immune_string5 ], [ String immune_string6 ] ) //Adds to the immunity list for this sentient.
removeimmune ( String immune, ....
takepain( Boolean bool ) //Set whether or not to take pain
tele( Vector location ) //Teleport to location
targettype( String value ) //Sets the target type to be none, any, or player
centroid //entity's centroid
forwardvector //get the forward vector of angles
leftvector //get the left vector of angles
origin( Vector newOrigin ) //Set the origin of the entity to newOrigin.
origin //gets entity's origin
rightvector //get the right vector of angles
upvector //get the up vector of angles
target ( String targetname_to_target )//entity's target
target //entity's target
targetname //entity's targetname
targetname( String targetName )
enablePain //sets enablePain variable
endactionanim( ) //End any aiming/action animation which is currently playing