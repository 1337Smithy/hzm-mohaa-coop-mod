//	Alarm system used in m4l3 and m6l2a. Created by Mackey McCandlish and calibrated with Steve Fukuda.
//
//	Before level waittill prespawn: "exec global/alarmer.scr"
//	Anybody with targetname "enemy" will try to ring the alarm.
//	Alarms are animate_equipment_alarmswitch with targetname "alarm" and they point away from the surface they're placed against.
//	The alarm spawners are AI placed in the level with targetname "alarmspawner".
//	The Alarm triggers are "trigger_use"s with setthread "alarm_player_reset". They encompass the actual alarm.
//	You can set level.alarm_always_on to 1 and the alarm will come back on after 14-20 seconds.
//
//

//=========================================================================
main:{
//=========================================================================
	level.alarm_always_on = 0
	level.alarm_always_on_base = 14
	level.alarm_always_on_random = 7
	level.alarm_time = 0
	level.alarm_time_base = 14
	level.alarm_time_random = 5

	for (local.i=1;local.i<$alarm.size+1;local.i++)
		$alarm[local.i] notsolid

	level waittill prespawn
		
	//chrissstrahl - we need to make this work in coop/mp
	//but it seams that the game handles renaming/refreshing differently in mp
	//so this original code will make the level hang in the frame where this all
	//is suppose to happen, instead I will try a different timedelayed approach
	//while ($alarmspawner){
		//local.ent = waitthread global/spawner.scr::spawner_create $alarmspawner[1]
		//local.ent.targetname = "alarmspawned"
	//}
	for(local.i=1;local.i<=$alarmspawner.size;local.i++){
		local.ent = waitthread global/spawner.scr::spawner_create $alarmspawner[local.i]
		local.ent.targetname = "alarmspawned"
	}

	//level waittill spawn //chrissstrahl
	waitthread coop_mod/replace.scr::waitForPlayer //chrissstrahl - coop/mp

	thread alarmgenner
	level.alarmer_alarmoff = level.time + 1 //chrissstrahl - use a level-var instead of a entity-var ($player array issue)
	thread alarmer
}end

//=========================================================================
doalarm:{
//=========================================================================
	level.alarmers++
	//println "doing alarm" //chrissstrahl
	local.range = 5000
	local.alarm = -1
	//println ("Enemy " + (vector_length (self.origin - $player.origin)) + " distance away is doing alarm and is in thinkstate " + self.thinkstate) //chrissstrahl
	for (local.j=1;local.j<$alarm.size+1;local.j++){
		local.temprange = vector_length (self.origin - $alarm[local.j].origin)
		//chrissstrahl - make coop compatible
		for (local.i = 1;local.i <= $player.size;local.i++){
			local.player = $player[local.i]
			if( local.player != NULL && local.temprange < local.range && (vector_length (local.player.origin - $alarm[local.j].origin) > local.temprange)){
				local.range = local.temprange
				local.alarm = local.j
				//iprintlnbold_noloc("DEV: doalarm range: "+local.range) //chrissstrahl
			}
		}
		//eof chrissstrahl
	}

	if (local.alarm != -1){
		local.break = 0
		local.timer = level.time + 12
	
		thread de-alarmer

		local.org = angles_toforward ($alarm[local.alarm].angles)
//		local.org = ((local.org * 30) + ($alarm[local.alarm].origin)) + ( 0 0 -25 )
		local.org = ((local.org * 35) + ($alarm[local.alarm].origin)) + ( 0 0 -30 )
		local.ent = spawn script_origin
		local.ent.origin = local.org
		local.ent droptofloor
		local.org = local.ent.origin
		local.ent delete

		wait (randomfloat(2.3))
		self exec global/disable_ai.scr
//		self type_attack "alarm"
//		local.ent = spawn script_origin
//		local.ent.origin = local.org
//		self alarmnode local.ent
//		self alarmthread "alarmreg"
//		println "should be running for alarm"
//		waitframe

		self.movedoneradius = 15
		while ((isalive self) && (local.break == 0) && (level.time < local.timer)) {
			self runto local.org
			self waittill movedone

			if (level.alarm_on == 0 && isalive(self)){ //chrissstrahl - added isalive, make sure dead man make no more troubles
			
				//chrissstrahl - test
				local.player = exec coop_mod/replace.scr::player_closestTo self
				local.vec = local.player.origin
				for (local.i = 1;local.i <= $player.size;local.i++){
					local.player =  $player[local.i]
					if( local.player != NULL && local.player isTouching self){
						if( local.player.dmteam != "spectator" && local.player.health > 0 ){
							if(local.awaypos != NIL){
								local.player origin self.origin
								exec coop_mod/main.scr::playerMakeSolidAsap local.i
							}
						}
					}
				}
				
				//end test
			
				if (vector_length (self.origin - $alarm[local.alarm].origin) < 90){
					self.turndoneerror = 10
					self turnto $alarm[local.alarm]
					self waittill turndone
					self anim alarm_switchon
					self playsound alarm_switch

					local.break = 1
					
					wait 0.2
					for (local.i=1;local.i<$alarm.size+1;local.i++){
       					$alarm[local.i] anim turnon
					}

					wait 0.5
					level.alarm_on = 1
				}
			}
			else{
				local.break = 1
			}
			wait 1
		}
	}
	else{
		level.alarmers--
	}

	if (isalive self){
		self exec global/enable_ai.scr
	}
}end

//=========================================================================
de-alarmer:{
//=========================================================================
	wait 12
	level.alarmers--
}end

alarmreg:
end

//=========================================================================
alarm_player_reset:{
//=========================================================================
	if (level.time > level.alarmer_alarmoff){ //chrissstrahl - coop compatibility (level. instead of using $player)
		level.alarmer_alarmoff = level.time + 1 //chrissstrahl - coop compatibility (level. instead of using $player)

		if (level.alarm_on == 1){
			level.alarm_on = 0
			
			for (local.i=1;local.i<$alarm.size+1;local.i++){
       			$alarm[local.i] anim turnoff
			}

			self playsound alarm_switch
			if (level.alarm_time - level.time < 5){
				level.alarm_time = level.time + (level.alarm_time_base + randomint(alarm_time_random))
			}

			wait 0.5

//			for (local.i=1;local.i<$alarm.size+1;local.i++)
//       			$alarm[local.i] stoploopsound

			level.alarm_sound stoploopsound

			if (level.alarm_always_on == 1){
				wait (level.alarm_always_on_base + randomint(level.alarm_always_on_random))
			}

			if (level.alarm_always_on == 1){
				if (level.alarm_on == 0){
					level.alarm_on = 1
							
					for (local.i=1;local.i<$alarm.size+1;local.i++){
       					$alarm[local.i] anim turnon
					}

					self playsound alarm_switch

					wait 0.5

//					for (local.i=1;local.i<$alarm.size+1;local.i++)
//						$alarm[local.i] loopsound alarmbell

				}
			}
		}
		else{
			level.alarm_on = 1
			
			for (local.i=1;local.i<$alarm.size+1;local.i++){
       			$alarm[local.i] anim turnon
			}

			self playsound alarm_switch

			wait 0.5

//			for (local.i=1;local.i<$alarm.size+1;local.i++)
//				$alarm[local.i] loopsound alarmbell
		}
	}
//	local.alarmbell thread global/loopsound.scr::main alarmbell 	// Ring the alarm bell
}end

//=========================================================================
turn_alarm_on:{
//=========================================================================
	if (level.alarm_on == 0){
		level.alarm_on = 1
				
		for (local.i=1;local.i<$alarm.size+1;local.i++){
       		$alarm[local.i] anim turnon
		}

		self playsound alarm_switch
		wait 0.5

//		for (local.i=1;local.i<$alarm.size+1;local.i++)
//			$alarm[local.i] loopsound alarmbell
	}
}end

//=========================================================================
alarmsounder:{
//=========================================================================
	level.alarm_sound = spawn script_model
//	level.alarm_sound thread playersoundorg
	level.alarm_sound model "fx/dummy.tik"
	level.alarm_sound notsolid

	local.lastClosestOrigin = (0 0 0) //chrissstrahl - coop/mp
	while (1){
		if (level.alarm_on == 1){
			local.range = 1400
	
			for (local.i=1;local.i<$alarm.size+1;local.i++){
				local.player = exec coop_mod/replace.scr::player_closestTo $alarm[local.i] //chrissstrahl - grab player closest to alarmer
				if(local.player != NULL){
					local.lastClosestOrigin = local.player.origin
				}
				local.newrange = vector_length ( local.lastClosestOrigin - $alarm[local.i].origin)
				if (local.newrange < local.range){
//					$alarm[local.i] loopsound alarmbell
					local.range = local.newrange
				}
//				waitframe
			}
			local.vol = (1.5 / 1350) * (local.range)
			local.vol = 1.5 - local.vol
			if (local.vol < 0.2){
				local.vol = 0.2
			}else if (local.vol > 1.5){
				local.vol = 1.5
			}
				
			level.alarm_sound loopsound alarmbell local.vol "levelwide"
		}
		waitframe
	}
}end

//=========================================================================
alarmgenner:{
//=========================================================================
	if (level.alarm_nosound == NIL){
		thread alarmsounder
	}
	
	local.timer = level.time
	while (level.gametype != 0 || isalive $player ){ //chrissstrahl - make sure 
		if (level.alarm_on == 1){
			if (level.time > local.timer){
				if(level.gametype == 0){ //chrissstrahl - sp
					local.key = getboundkey1 "+use"
					iprintlnbold_noloc (loc_convert_string ( "Approach alarms and press the USE key ( " + local.key + " ) to toggle them off or on." ) )
					local.timer = level.time + 12
				}else{ //chrissstrahl - mp/coop
					iprintlnbold_noloc (loc_convert_string ( "Approach alarms and press the USE key to toggle them off or on." ) )
					local.timer = level.time + 30
				}
			}

			//while (level.totalspawnies < 2){ //chrissstrahl
			
			local.countNow = 0//chrissstrahl
			while (level.totalspawnies < (waitthread coop_enemyAdjustificator 2) ){ //chrissstrahl - coop test
				local.countNow++ //chrissstrahl
				//iprintlnbold_noloc local.countNow //chrissstrahl - debug
				waitthread create_alarmguy
				//wait randomint (3) //chrissstrahl - this can lead to a infinmity loop, cuz 0 is more likley to be returned often
				wait (randomint (2) + 1) //chrissstrahl - coop
			}
			//iprintlnbold_noloc level.totalspawnies //chrissstrahl - debug
		}
		else{
			local.timer = level.time + 45
		}
		wait 1
	}
}end

//challed when ver ther are level.totalspawnies < 2
//
//=========================================================================
create_alarmguy:{
//=========================================================================
	local.range = 5000
	local.entnum = -1
	local.num = 0
//	local.spawner = -1
	for (local.j=1;local.j<$alarmspawned.size+1;local.j++){
		local.preppSpawner = 1
		//chrissstrahl - check for coop
		local.validPlayers = 0
		for (local.i = 1;local.i <= $player.size;local.i++){
			local.player = $player[local.i]
			if( local.player != NULL && local.player.health > 0 ){
				if(level.gametype != 0){
					if(local.player.dmteam == "spectator" || local.player.flags["coop_isActive"] != 1 ){
						continue
					}
				}
				if (local.player canseenoents ($alarmspawned[local.j].origin + (0 0 50))){
					local.preppSpawner = 0
				}
				local.validPlayers++
			}
			wait 0.1 //waitframe //chrissstrahl - was wait 0.1
		}
		
		if( local.validPlayers != 0 ){ //chrissstrahl - make sure this is only done if a player is valid
			//end chrissstrahl
			if(local.preppSpawner){	
				local.num++
				local.spawner[local.num] = $alarmspawned[local.j]
				//iprintlnbold_noloc("prepped a spawner at " + local.spawner[local.num].origin + " with num " + local.num)//chrissstrahl
				//println ("prepped a spawner at " + local.spawner[local.num].origin + " with num " + local.num) //chrissstrahl - spam
			}		
		}

/* //chrissstrahl - original code
		if !($player canseenoents ($alarmspawned[local.j].origin + (0 0 50))){
			local.num++
			local.spawner[local.num] = $alarmspawned[local.j]
			println ("prepped a spawner at " + local.spawner[local.num].origin + " with num " + local.num)
		}
		wait 0.1
*/		
	}

	if (local.spawner == NIL){	end }

	local.lastnum = -1

	for (local.j=1;local.j<local.num+1;local.j++){
		//chrissstrahl - sp
		if(level.gametype == 0){
			local.temprange = vector_length ($player.origin - local.spawner[local.j].origin)
		}
		//chrissstrahl - mp/coop
		else{
			for (local.i = 1;local.i <= $player.size;local.i++){
				local.player = $player[local.i]
				if( local.player != NULL && local.player.health > 0 && local.player.dmteam != "spectator" || local.player.flags["coop_isActive"] == 1 ){
					local.temprange = vector_length (local.player.origin - local.spawner[local.j].origin)
				}
			}
		}
		//end chrissstrahl
		
		//iprintlnbold_noloc("checking local spawner " + local.j + " and local num is " + local.num + " at range " + local.temprange) //chrissstrahl
		//println ("checking local spawner " + local.j + " and local num is " + local.num + " at range " + local.temprange) //chrissstrahl
		if (local.temprange < local.range){
			local.range = local.temprange
			local.lastnum = local.entnum
			local.entnum = local.j
		}
	}

	if (local.lastnum != -1)
		local.entnum = local.lastnum

	if (local.entnum != -1){
		local.ent = waitthread global/spawner.scr::spawner_activate local.spawner[local.entnum]
		local.ent.targetname = "alarm_spawned_guy"
		local.ent thread spawnerthink
	}
	else{
		//chrissstrahl - disabled, this was spamming, forgot to disable before release - Suxev found it
		//chrissstrahl - print out info in coop
		//if(level.gametype != 0){
			//iprintlnbold_noloc("DEV: create_alarmguy - failed") //chrissstrahl
		//}
		println "-------------------"
		println local.range
		println local.lastnum
		println local.entnum
		println "-------------------"
	}
}end

//=========================================================================
runcheck:{
//=========================================================================
	if (level.runcheck){
		level.runcheck delete
	}

	level.runcheck = local
	while (isalive self){
		if (getcvar(debug) == "1")
		println ("A spawned guy is at " + self.origin + " with thinkstate " + self.thinkstate)
		wait 1
	}
}end

//=========================================================================
spawnerthink:{
//=========================================================================
	if (game.skill == "hard"){
		if (randomint(100) > 60){
			self item items/item_25_healthbox.tik 25
		}
	}

	self ammo_grenade (randomint(4) + 1)
	self mindist 128
	self leash 8000
	self maxdist 400
	self fixedleash 0
	self.movedoneradius = 450
	wait randomfloat(3)
	level.totalspawnies++
	thread baddeath
	self.nosurprise = 1
	local.origin = self.origin

	self thread level.script::alarmer
	self forceactivate
	wait 1
	if (self.thinkstate == "idle"){
		println ("spawned guy is running to the player from " + self.origin)
		self thread runcheck
		//self runto $player//chrissstrahl
		self exec coop_mod/replace.scr::runtoClosest //chrissstrahl - coop
		self waittill movedone
		self attackplayer
//		println ("movefail is " + parm.movefail)
		
		//chrissstrahl - let us handle this differently in coop
		if(level.gametype != 0 ){
			if ((parm.movefail == 1) && (vector_length (self.origin - local.origin) < 100) ){
				//iprintlnbold_noloc("DEV: spawnerthink move failed (ai stuck ?)")
				self damage $world 15000 $world (0 0 0) (0 0 0) (0 0 0) 0 9 0 0
			}
		}else{
		//chrissstrahl - original handle
			if ((parm.movefail == 1) && !(self canseenoents $player) && (vector_length (self.origin - local.origin) < 100)){
				self damage $world 15000 $world (0 0 0) (0 0 0) (0 0 0) 0 9 0 0
			}
		}
	}

	while (isalive self){
		println ("spawned guy is running to the player from " + self.origin)
		//self runto $player chrissstrahl
		self exec coop_mod/replace.scr::runtoClosest //chrissstrahl - coop
		self waittill movedone
		self attackplayer
		wait 2
	}
}end

//=========================================================================
baddeath:{
//=========================================================================
	self waittill death
	//println "I die!" //chrissstrahl
	level.totalspawnies--
}end

//=========================================================================
debugprint:{
//=========================================================================
	while (1){
		println ("alarmers = " + level.alarmers + " baddies " + level.totalspawnies)
		wait 1
	}
}end


//chrissstrahl - notes to original thread
//executed once from main:
//runs infinite - contains a wait/cooldown instruction
//cecks every enemy if not in idle state, picks the one closest to the player
//makes enemy pull alarm (thread doalarm)
//=========================================================================
alarmer:{
//=========================================================================
	level.alarmers = 0
	level.totalspawnies = 0
	level.alarm_on = 0
	if (getcvar(skill) == "0")
		local.alarmcount = 0
	else
		local.alarmcount = 1

	if (getcvar(debug) == "1"){
		thread debugprint
	}
	
	while (1){
		while ((level.alarmers > local.alarmcount) || (level.alarm_on == 1) || (level.time < level.alarm_time)){
			wait 1
		}

		wait randomfloat(2)
		local.ent = -1
		local.lastent = -1
		local.range = 1500
		for (local.i=1;local.i<$enemy.size+1;local.i++){
			if ((isalive $enemy[local.i]) && ($enemy[local.i].thinkstate != "idle")){ //  ($enemy[local.i] cansee $player)) 
				
				//chrissstrahl - sp
				if(level.gametype == 0){
					local.newrange = vector_length ($enemy[local.i].origin - $player.origin)
				}
				//chrissstrahl - mp/coop
				else{
					local.newrange = vector_length ($enemy[local.i].origin - (waitexec coop_mod/replace.scr::origin $enemy[local.i]))
				}
				
				if (local.newrange < local.range){
					local.range = local.newrange
					local.ent = local.i
/*
					if (local.lastent == -1)
					{
						local.ent = local.lastent
						local.lastent = local.i
					}
					else
					{
						local.lastent = local.i
						local.ent = local.i
					}
*/
				}
			}
//			else
//			println ("thinkstate is " + $enemy[local.i].thinkstate)
		}
		

		if (local.ent != -1){
			local.pullAlarm = 0 //chrissstrahl
			if (game.skill == "hard"){
				local.pullAlarm = 1
			}else{
				//chrissstrahl - check for coop
				for (local.i = 1;local.i <= $player.size;local.i++){
					local.player = $player[local.i]
					if( local.player != NULL && local.player.health > 0 ){
						if(level.gametype != 0){
							if(local.player.dmteam == "spectator" || local.player.flags["coop_isActive"] != 1 ){
								continue
							}
						}
						if ($enemy[local.ent] canseenoents local.player){
							local.pullAlarm = 1
						}
					}
				}
				//end chrissstrahl
			}
			
			
			//chrissstrahl
			if (local.pullAlarm){
				//iprintlnbold_noloc("DEV: PULL ALARM: "+vector_length($enemy[local.ent].origin - exec coop_mod/replace.scr::origin $enemy[local.ent])) //chrissstrahl
				$enemy[local.ent] thread doalarm
			}
		}
		/*
		else
		if (local.lastent != -1)
		if (level.enemy[local.lastent] cansee $player)
			level.enemy[local.lastent] thread bridgeblownow (randomint(3))
		*/

		wait 2
	}
}end


//chrissstrahl - used to adjust number of enemies during coop play, using alarmer.scr
//=========================================================================
coop_enemyAdjustificator local.current:{
//=========================================================================
	local.actives = waitthread coop_mod/replace.scr::player_numActive
	if( local.actives == 0){ end 0 }
	else if( local.actives == 1){ end (local.current + 1) }
	else if( local.actives == 2 ){ end (local.current + 2) }
	else if( local.actives == 3){ end (local.current + 3) }
	else if( local.actives >= 4 ){ end (local.current + 4) }
}end

